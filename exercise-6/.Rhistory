# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
dep_delay_by_month
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-average_arr_delay)
View(flights)
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)
# Create a dataframe of the average arrival delays for each _destination_, then
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delays for each _destination_, then
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
largest
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
largest_arrival_delay
View(airports)
?left_join
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports)
argest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
View(largest_arrival_delay)
airports
?airports
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
View(largest_arrival_delay)
left_join(airports, by"faa")
left_join(airports, by = "faa")
left_join(airports, by = "faa")
left_join(airports, by = faa)
left_join(airports, by = 'faa')
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
left_join(airports, by = 'faa')
View(largest_arrival_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa')
View(largest_arrival_delay)
?left_join
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
filter(avg_delay == max(avg_delay), na.rm = TRUE)
filter(avg_delay == max(avg_delay, na.rm = TRUE)
filter(avg_delay == max(avg_delay, na.rm = TRUE)
# Create a dataframe of the average arrival delays for each _destination_, then
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = 'faa') %>%
# Create a dataframe of the average arrival delay for each _airline_, then use
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
largest_arrival_delay
View(largest_arrival_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
View(largest_arrival_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest)
largest_arrival_delay
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
<- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa')
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
joined <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa')
View(joined)
largest_avg_delay <- joined %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest)
largest_avg_delay
View(airports)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
new_joined <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
view(new_join)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
new_joined <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
View(new_joined)
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa')
View(largest_arrival_delay)
View(airlines)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
new_joined <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines,by = "carrier")
View(new_joined)
smallest_avg_delay <- new_joined %>%
filter(avg_delay == min(avg_delay, na.rm = TRUE))
smallest_avg_delay
smallest_avg_delay <- new_joined %>%
select(filter(avg_delay == min(avg_delay, na.rm = TRUE)))
View(new_joined)
smallest_avg_delay <- new_joined %>%
select(filter(avg_delay == min(avg_delay, na.rm = TRUE)),carrier)
smallest_avg_delay <- new_joined %>%
select(filter(avg_delay == min(avg_delay, na.rm = TRUE)),carrier)
smallest_avg_delay <- select(filter(new_joined,avg_delay == min(avg_delay, na.rm = TRUE)),carrier)
smallest_avg_delay
smallest_avg_delay$carrier
styler:::style_active_file()
smallest_avg_delay <- select(
filter(
new_joined, avg_delay == min(avg_delay, na.rm = TRUE)),
carrier)
styler:::style_active_file()
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- functon(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp = max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
View(vehicles)
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- functon(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg = max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
colnames(vehicles)
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg = max(mpg)) %>%
select(name)
BestGearsCyl <- functon(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg = max(mpg)) %>%
select(name)
}
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg = max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
answer
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(4, 6)
answer
vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg))
BestGearsCyl <- function(gears, cylinders) {
vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg))
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg))
library(ggmap)
# Create URI by combining base and resource
base.uri <- "https://api.github.com"
resource <- paste0("/users/", "mkfreeman", "/repos")
uri.full <- paste0(base.uri, resource)
uri.full
# Create a list of parameters that you want to use
query.params <- list(sort = "full_name")
response <- GET(uri.full, query = query.params)
library(httr)
# Create a list of parameters that you want to use
query.params <- list(sort = "full_name")
response <- GET(uri.full, query = query.params)
response
?dim
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- https://api.github.com
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response  <- GET(paste0(base.uri,resource))
response
# Extract the "text" of the response usin the `content` function
body <- content(response,"text")
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response  <- GET(paste0(base.uri,resource))
response
paste(response)
# Extract the "text" of the response usin the `content` function
body <- content(response,"text")
response
