View(vehicles)
# Install (if needed) and load the "fueleconomy" package
# install.packages('devtools')
# devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install (if needed) and load the "dplyr" library
# install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
# install.packages('devtools')
# devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(vehicles)
mutate(vehicles, add == hwy/2)
frame_next <- mutate(vehicles, add == hwy/2)
frame_next <- mutate(vehicles, add = hwy/2)
frame_next <- mutate(vehicles, add = hwy/2)
frame_next
mutate(vehicles, add = hwy/2)
View(vehicles)
library(nycflights13)
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
col(flights)
ncol(flights)
colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, gain_in_air)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_in_air))
View(head(flights))
?head
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_in_air))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air,na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air,na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA")
View(to_sea)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin,destination,gain_in_air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin,dest,gain_in_air)
View(to_sea)
# On average, did flights to SeaTac gain or loose time?
mean(to_sea$gain_in_air, na.rm = TRUE)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
new <- filter(flights, origin=="JFK", dest=="SEA") %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
View(new)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights,origin == "JFK", dest == "SEA")
mean(gain_in_air, na.rm = TRUE)
mean(to_sea,gain_in_air, na.rm = TRUE)
mean(to_sea,gain_in_air, na.rm = TRUE)
mean(flights,gain_in_air, na.rm = TRUE)
mean(flights,gain_in_air, na.rm = TRUE)
mean()
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights,origin == "JFK", dest == "SEA") %>%
summarise(
ave = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin,dest,gain_in_air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin,dest,gain_in_air) %>%
mean(gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin,dest,gain_in_air) %>%
mean(flights,gain_in_air, na.rm = TRUE)
styler:::style_active_file()
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
summarise(
ave = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE)
)
flights %>%
group_by(origin) %>%
summarize(ave_delay = mean(dep_delay, na.rm = TRUE))
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
view
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
dep_delay_by_month
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay = max(delay)) %>%
select(month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
group_by(flights,month)
new <- group_by(flights, month)
View(new)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
dep_delay_by_month
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-average_arr_delay)
styler:::style_active_file()
View(airports)
